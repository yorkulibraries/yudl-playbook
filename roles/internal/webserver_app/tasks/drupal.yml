---

- name: Set drush_path if not defined
  set_fact:
    drush_path: "{{ drush_path | default('/var/www/html/drupal/vendor/bin/drush') }}"

- name: Fail if drush_path is not defined
  fail:
    msg: "The 'drush_path' variable is not defined. Please provide a valid path to Drush."
  when: drush_path is not defined

- name: Add Drupal Redis Service
  copy:
    src: /var/www/html/drupal/web/modules/contrib/redis/example.services.yml
    dest: /var/www/html/drupal/web/sites/default/redis.services.yml
    remote_src: true

- name: Trusted Host Settings
  blockinfile:
    state: present
    block: |
      $settings['trusted_host_patterns'] = array(
      {% for host in drupal_trusted_hosts %}
        '{{ host }}',
      {% endfor %}
      );
      $settings['flysystem'] = [
        'fedora' => [
          'driver' => 'fedora',
          'config' => [
            'root' => '{{ fedora_base_url }}',
          ],
        ],
      ];
      $settings['redis.connection']['interface'] = 'Predis';
      $settings['redis.connection']['host'] = 'localhost';
      $settings['redis.connection']['port'] = '6379';
      $settings['cache']['default'] = 'cache.backend.redis';
      $settings['container_yamls'][] = 'sites/default/redis.services.yml';
    path: "{{ drupal_trusted_hosts_file }}"
    marker: // {mark} ANSIBLE MANAGED BLOCK

- name: Gather list of installed modules
  command: "{{ drush_path }} --root {{ drupal_core_path }} pml --format=json"
  register: installed_modules
  changed_when: false

- name: Uninstall core search module
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y pm-uninstall search"
  when: "(installed_modules.stdout|from_json).search.status == 'Enabled'"

- name: Set permissions on the public files directory
  file:
    recurse: true
    state: directory
    path: "{{ drupal_public_filesystem }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"
    mode: "0775"

- name: Create drupal configs directory.
  file:
    state: directory
    path: "{{ webserver_app_drupal_config_path }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"
    mode: "0744"

- name: Copy ldap_authentication.settings.yml
  template:
    src: "ldap_authentication.settings.yml.j2"
    dest: "{{ drupal_core_path }}/modules/contrib/yudl_defaults/config/install/ldap_authentication.settings.yml"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"
    mode: "0440"
  when: env == "production"

- name: Copy ldap_servers.server.pydirectory.yml
  template:
    src: "ldap_servers.server.pydirectory.yml.j2"
    dest: "{{ drupal_core_path }}/modules/contrib/yudl_defaults/config/install/ldap_servers.server.pydirectory.yml"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"
    mode: "0440"
  when: env == "production"

- name: Copy ldap_servers.settings.yml
  template:
    src: "ldap_servers.settings.yml.j2"
    dest: "{{ drupal_core_path }}/modules/contrib/yudl_defaults/config/install/ldap_servers.settings.yml"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"
    mode: "0440"
  when: env == "production"

- name: Copy ldap_user.settings.yml
  template:
    src: "ldap_user.settings.yml.j2"
    dest: "{{ drupal_core_path }}/modules/contrib/yudl_defaults/config/install/ldap_user.settings.yml"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"
    mode: "0440"
  when: env == "production"

- name: Check if features are already imported
  command: "{{ drush_path }} --root {{ drupal_core_path }} pml --format=json"
  register: imported_features
  changed_when: false
  ignore_errors: true

- name: Import features
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y fim islandora_core_feature,islandora_defaults"
  when: >
    (features_imported is defined and
    ('islandora_core_feature' not in features_imported or
     'islandora_defaults' not in features_imported))

- name: Check if EVA views are enabled
  command: "{{ drush_path }} --root {{ drupal_core_path }} pml --format=json"
  register: enabled_modules
  changed_when: false

- name: Enable EVA views
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y ven display_media"
  when: "(installed_modules.stdout|from_json).eva.status != 'Enabled'"

- name: Ensure pdf.js directory exists
  file:
    path: "{{ drupal_external_libraries_directory }}/pdf.js"
    state: directory
    mode: "0754"

- name: Unarchive pdf.js library
  unarchive:
    src: "https://github.com/mozilla/pdf.js/releases/download/v2.14.305/pdfjs-2.14.305-dist.zip"
    dest: "{{ drupal_external_libraries_directory }}/pdf.js"
    creates: "{{ drupal_external_libraries_directory }}/pdf.js/build"
    remote_src: true

- name: Set permissions on libraries so we don't get a FORBIDDEN error for pdf.js
  file:
    path: "{{ drupal_core_path }}/libraries"
    state: directory
    recurse: true
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"
    mode: "1755"

- name: Add project's /vendor/bin to $PATH (ubuntu)
  lineinfile:
    path: ~/.profile
    line: 'PATH="$PATH:{{ webserver_document_root }}/drupal/vendor/bin"'
    state: present
  become: false
  when: ansible_os_family == "Debian"
